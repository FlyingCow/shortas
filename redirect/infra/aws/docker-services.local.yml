version: "3.8"
networks:
  core-net:
    driver: bridge
    external: false

services:
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PORT_WEB_UI=8082
      - AWS_DEFAULT_REGION=us-west-1
      - AWS_SECERET_ACCESS_KEY=foobar
      - AWS_ACCESS_KEY_ID=foobar
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - core-net

  # kafka:
  #   image: docker.io/bitnami/kafka:3.8
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"
  #   volumes:
  #     - "kafka_data:/bitnami"
  #   environment:
  #     - KAFKA_CFG_NODE_ID=0
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
  #     # Listeners
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_ADVERTISED_HOST_NAME=kafka
  #   restart: always

  #   networks:
  #     - core-net

  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    hostname: clickhouse
    volumes:
      - ${PWD}/fs/volumes/clickhouse/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ${PWD}/fs/volumes/clickhouse/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml
      - ${PWD}/fs/volumes/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - core-net

  clickhouse-init:
    image: clickhouse/clickhouse-server
    volumes:
      - ./clickhouse:/var/clickhouse
    depends_on:
      - clickhouse
    networks:
      - core-net
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      while ! clickhouse-client --host clickhouse -q \"SHOW databases;\"; do
          echo waiting for clickhouse up
          sleep 1
      done

      clickhouse-client --host clickhouse -n <<-EOSQL
        CREATE DATABASE IF NOT EXISTS shortas;

        CREATE OR REPLACE TABLE shortas.click_stream
        (
            id FixedString(26),
            owner_id FixedString(26),
            creator_id FixedString(26),
            route_id FixedString(26),
            workspace_id FixedString(26),
            inserted DateTime MATERIALIZED now(),
            created DateTime,
            dest Nullable(String),
            ip LowCardinality(Nullable(String)),
            continent LowCardinality(Nullable(String)),
            country LowCardinality(Nullable(FixedString(2))),
            location LowCardinality(Nullable(String)),
            os_family LowCardinality(Nullable(String)),
            os_version LowCardinality(Nullable(String)),
            user_agent_family LowCardinality(Nullable(String)),
            user_agent_version LowCardinality(Nullable(String)),
            device_brand LowCardinality(Nullable(String)),
            device_family LowCardinality(Nullable(String)),
            device_model LowCardinality(Nullable(String)),
            session_first Nullable(DateTime),
            session_clicks Nullable(UInt128),
            is_unique Bool,
            is_bot Bool
        )
        ENGINE = MergeTree
        ORDER BY id;
      EOSQL
      tail -f /dev/null
      "

  # vector:
  #   image: timberio/vector:latest-alpine
  #   container_name: vector
  #   hostname: vector
  #   volumes:
  #     - ${PWD}/fs/volumes/vector/vector.toml:/etc/vector/vector.toml
  #     - ${PWD}/fs/volumes/vector/vector.yaml:/etc/vector/vector.yaml
  #   depends_on:
  #     - clickhouse
  #     - kafka
  #   networks:
  #     - core-net

  cache:
    image: "redis/redis-stack:edge"
    container_name: cache
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data
    networks:
      - core-net

  sc:
    image: infinyon/fluvio:stable
    container_name: sc
    hostname: sc
    ports:
      - "9103:9003"
    environment:
      - RUST_LOG=info
    command: "./fluvio-run sc --local /fluvio/metadata"
    volumes:
      - ./fs/fluvio-metadata:/fluvio/metadata
    networks:
      - core-net
  sc-setup:
    build:
      context: .
      dockerfile: fluvio/Dockerfile
    container_name: sc-setup
    environment:
      - RUST_LOG=info
    entrypoint: >
      /bin/sh -c "
      fluvio profile add docker sc:9003 docker;
      fluvio cluster spu register --id 5001 -p 0.0.0.0:9110 -l spu:9010 --private-server spu:9011;
      fluvio topic create hit-stream-local;
      fluvio topic create click-aggs-local;
      exit 0;
      "
    depends_on:
      - sc
    networks:
      - core-net
  spu:
    image: infinyon/fluvio:stable
    container_name: spu
    hostname: spu
    volumes:
      - ./fs/fluvio-data:/fluvio/data
    environment:
      - RUST_LOG=info
    ports:
      - "9110:9010"
      - "9111:9011"
    command: "./fluvio-run spu -i 5001 -p spu:9010 -v spu:9011 --sc-addr sc:9004 --log-base-dir /fluvio/data"
    depends_on:
      - sc
    networks:
      - core-net

volumes:
  kafka_data:
    driver: local
  cache:
    driver: local
